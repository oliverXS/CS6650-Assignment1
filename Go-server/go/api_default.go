/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"strings"
)

func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	urlPath := r.URL.Path

	// URL path is /albums/{albumID}
	urlPaths := strings.Split(urlPath, "/")
	// print(urlPaths)

	// Check if the URL format is valid
	if len(urlPaths) != 3 || urlPaths[1] != "albums" {
		writeError(w, "URL format is invalid.", http.StatusNotFound)
		return
	}

	albumInfo := AlbumInfo{
		Artist: "Sex Pistols",
		Title:  "Never Mind The Bollocks!",
		Year:   "1977",
	}

	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(albumInfo)
	if err != nil {
		return
	}
}

func NewAlbum(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	if r.Method != http.MethodPost {
		writeError(w, "Invalid request method.", http.StatusMethodNotAllowed)
		return
	}

	if !strings.HasPrefix(r.Header.Get("Content-Type"), "multipart/form-data") {
		writeError(w, "Form must have enctype=multipart/form-data", http.StatusBadRequest)
		return
	}

	// Parse the multipart form data
	if err := r.ParseMultipartForm(10 << 20); err != nil {
		writeError(w, "Error parsing multipart form: "+err.Error(), http.StatusBadRequest)
		return
	}

	// Handle the image file part
	fileHeaders, ok := r.MultipartForm.File["image"]
	if !ok || len(fileHeaders) == 0 {
		writeError(w, "Error processing the request: no file provided", http.StatusBadRequest)
		return
	}
	file, err := fileHeaders[0].Open()
	if err != nil {
		writeError(w, "Error processing the request: "+err.Error(), http.StatusBadRequest)
		return
	}
	defer func(file multipart.File) {
		err := file.Close()
		if err != nil {

		}
	}(file)
	imageData, err := io.ReadAll(file)
	if err != nil {
		writeError(w, "Error processing the request: "+err.Error(), http.StatusBadRequest)
		return
	}
	imageSize := len(imageData)

	imageMetaData := ImageMetaData{
		AlbumID:   "1",
		ImageSize: fmt.Sprintf("%d bytes", imageSize),
	}

	// Handle the profile JSON part
	profileValues, ok := r.MultipartForm.Value["profile"]
	if !ok || len(profileValues) == 0 {
		writeError(w, "Error processing the request: no profile provided", http.StatusBadRequest)
		return
	}
	profileJson := profileValues[0]
	var profile AlbumInfo
	err = json.Unmarshal([]byte(profileJson), &profile)
	if err != nil {
		writeError(w, "Error processing the request: "+err.Error(), http.StatusBadRequest)
		return
	}

	w.WriteHeader(http.StatusOK)
	err = json.NewEncoder(w).Encode(imageMetaData)
	if err != nil {
		return
	}
}

func writeError(w http.ResponseWriter, msg string, status int) {
	w.WriteHeader(status)
	err := json.NewEncoder(w).Encode(ErrorMsg{Msg: msg})
	if err != nil {
		return
	}
}
